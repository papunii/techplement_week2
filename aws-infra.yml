AWSTemplateFormatVersion: "2010-09-09"
Description: "CloudFormation Template for VPC, Subnets, Internet Gateway, Route Table, EC2, Security Group, and S3 in ap-south-1"

Resources:
  # Create VPC
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "MyVPC"

  # Create Public Subnet
  MyPublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: ap-south-1a
      Tags:
        - Key: Name
          Value: "PublicSubnet"

  # Create Private Subnet
  MyPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: ap-south-1b
      Tags:
        - Key: Name
          Value: "PrivateSubnet"

  # Create Internet Gateway
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "MyIGW"

  # Attach Internet Gateway to VPC
  MyIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway

  # Create Route Table for Public Subnet
  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: "PublicRouteTable"

  # Create Route to Allow Internet Access
  MyRoute:
    Type: AWS::EC2::Route
    DependsOn: MyIGWAttachment
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  # Associate Route Table with Public Subnet
  MyRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet
      RouteTableId: !Ref MyRouteTable

  # Create Security Group
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH and HTTP access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: "MySecurityGroup"

  # Create EC2 Instance in Public Subnet
  MyEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-05c179eced2eb9b5b  # AMI for ap-south-1
      SubnetId: !Ref MyPublicSubnet
      SecurityGroupIds:
        - !Ref MySecurityGroup
      KeyName: KEY  # Using specified key name
      Tags:
        - Key: Name
          Value: "MyJenkinsEC2"

  # Create an S3 Bucket
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: satya_s3bucket  # Change to a unique name

Outputs:
  VPCID:
    Description: "VPC ID"
    Value: !Ref MyVPC

  PublicSubnetID:
    Description: "Public Subnet ID"
    Value: !Ref MyPublicSubnet

  PrivateSubnetID:
    Description: "Private Subnet ID"
    Value: !Ref MyPrivateSubnet

  EC2PublicIP:
    Description: "EC2 Instance Public IP"
    Value: !GetAtt MyEC2Instance.PublicIp
